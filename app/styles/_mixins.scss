
@mixin spaces($number) {

    $content: "";

    @for $i from 1 through $number {
        .item-#{$i} {
            $content: $content+"\00a0";
        }
    }

    &:before {
        content: $content;
        display: inline;
    }
}


@mixin rFontSize($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        font-size: $value*1px;
        font-size: $processingRem+rem;
    }
    @else {
        font-size: $processingRem+rem;
    }
}

@mixin rLineHeight($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        line-height: $value*1px;
        line-height: $processingRem+rem;
    }
    @else {
        line-height: $processingRem+rem;
    }
}

@mixin rLetterSpacing($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        letter-spacing: $value*1px;
        letter-spacing: $processingRem+rem;
    }
    @else {
        letter-spacing: $processingRem+rem;
    }
}

@mixin rMarginLeft($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        margin-left: $value*1px;
        margin-left: $processingRem+rem;
    }
    @else {
        margin-left: $processingRem+rem;
    }
}
@mixin rMarginRight($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        margin-right: $value*1px;
        margin-right: $processingRem+rem;
    }
    @else {
        margin-right: $processingRem+rem;
    }
}
@mixin rMarginTop($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        margin-top: $value*1px;
        margin-top: $processingRem+rem;
    }
    @else {
        margin-top: $processingRem+rem;
    }
}


@mixin rTop($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        top: $value*1px;
        top: $processingRem+rem;
    }
    @else {
        top: $processingRem+rem;
    }
}

@mixin rLeft($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        left: $value*1px;
        left: $processingRem+rem;
    }
    @else {
        left: $processingRem+rem;
    }
}


@mixin rWidth($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        width: $value*1px;
        width: $processingRem+rem;
    }
    @else {
        width: $processingRem+rem;
    }
}


@mixin rMaxWidth($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        max-width: $value*1px;
        max-width: $processingRem+rem;
    }
    @else {
        max-width: $processingRem+rem;
    }
}

@mixin rMaxHeight($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        max-height: $value*1px;
        max-height: $processingRem+rem;
    }
    @else {
        max-height: $processingRem+rem;
    }
}

@mixin rMinWidth($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        Min-width: $value*1px;
        Min-width: $processingRem+rem;
    }
    @else {
        Min-width: $processingRem+rem;
    }
}

@mixin rMinHeight($value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        Min-height: $value*1px;
        Min-height: $processingRem+rem;
    }
    @else {
        Min-height: $processingRem+rem;
    }
}





@mixin rmux( $property, $value) {
  $processingRem: ((round(($value / $fontsize-base) * 10000000)) / 10000000);

    @if $remuxFallback == true {
        $property: $value*1px;
        $property: $processingRem+rem;
    }
    @else {
        $property: $processingRem+rem;
    }
}



